@page "/catalog"
@using Data
@using Services
@using Newtonsoft.Json
@inject NotificationService notification
@inject DialogService DialogService
@inject ICatalogService CatalogService
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage



<RadzenRow>
    <RadzenColumn SizeLG="7" SizeMD="7" SizeSM="12" Size="12">
        <RadzenRow>
            <RadzenText TextStyle="TextStyle.H5">Dữ liệu danh mục :</RadzenText>
            <RadzenDropDown Data=@catalogdata AllowVirtualization="true" Name="DropDownVirtualizationLoadData" Change="ChangeType"
                            @bind-Value=type
                            TextProperty="Display" ValueProperty="Type" Style="width: 100%; max-width: 300px;" Placeholder="Chọn loại dữ liệu danh mục" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" AllowFiltering="true" />
        </RadzenRow>
    </RadzenColumn>
    <RadzenColumn SizeLG="5" SizeMD="5" SizeSM="12" Size="12">
        <RadzenSplitButton Click=@(args => ButtonAdd(args)) Text="Dữ liệu danh mục" Style="float:right" Icon="add">
            <ChildContent>
                <RadzenSplitButtonItem Text="Dạng bào chế, đường dùng, thời gian" Value="1" />
                <RadzenSplitButtonItem Text="Hoạt chất" Value="2" />
                <RadzenSplitButtonItem Text="Liều dùng" Value="3" />
                <RadzenSplitButtonItem Text="Dị ứng" Value="4" />

            </ChildContent>
        </RadzenSplitButton>
        <RadzenSplitButton Click=@(args => ButtonClearCache(args)) Text="Xóa cache" Icon="cached" Style="float:right" ButtonStyle="ButtonStyle.Warning" class="rz-mr-2">
            <ChildContent>
                <RadzenSplitButtonItem Text="Danh mục tương tác" Value="1" />
                <RadzenSplitButtonItem Text="Danh mục thuốc" Value="2" />
                <RadzenSplitButtonItem Text="Danh mục hoạt chất" Value="3" />
                <RadzenSplitButtonItem Text="Tất cả" Value="4" />

            </ChildContent>
        </RadzenSplitButton>
        <RadzenButton Text="Đồng bộ dữ liệu" Icon="alarm_on" Style="float:right" ButtonStyle="ButtonStyle.Info" class="rz-mr-2" Click="GetSync" />

    </RadzenColumn>
</RadzenRow>
<hr />


@if (listduration != null && listduration.Count > 0 && type == "duration")
{


    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                    FilterMode="FilterMode.Simple" PageSize="12" AllowPaging="true" AllowSorting="true" Data="@listduration"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And" Style="height:550px">

        <Columns>
            <RadzenDataGridColumn TItem="DurationModel" Property="Id" Title="Mã thời gian" />
            <RadzenDataGridColumn TItem="DurationModel" Property="Dura_name" Title="Thời gian" />
            <RadzenDataGridColumn TItem="DurationModel" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FrozenPosition="FrozenColumnPosition.Right" Width="110px">
                <Template Context="data">
                    <RadzenButton Shade="Shade.Lighter" Icon="dangerous" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Warning" Click="@((args) =>
                    {
                        if (data.Id  != 0)
                        {
                            //DeleteCatalogData("duration",data.Id);
                             ConfirmDelete( "duration",data.Id );
                        }
                    }

                )"></RadzenButton>
                    |
                    <RadzenButton Shade="Shade.Lighter" Icon="edit" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) =>

                    {
                        if (data.Id  != 0 && data.Dura_name != null)
                        {
                            EditCatalogData("duration", data.Id, data.Dura_name);
                        }
                    }
                )"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
}
else if (listroute != null && listroute.Count > 0 && type == "route")
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                    FilterMode="FilterMode.Simple" PageSize="12" AllowPaging="true" AllowSorting="true" Data="@listroute"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And" Style="height:550px">


        <Columns>
            <RadzenDataGridColumn TItem="RouteModel" Property="Id" Title="Mã đường dùng" />
            <RadzenDataGridColumn TItem="RouteModel" Property="Route_name" Title="Đường dùng" />
            <RadzenDataGridColumn TItem="RouteModel" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FrozenPosition="FrozenColumnPosition.Right" Width="110px">
                <Template Context="data">
                    <RadzenButton Shade="Shade.Lighter" Icon="dangerous" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Warning" Click="@((args) =>
                    {
                        if (data.Id  != 0)
                        {
                            //DeleteCatalogData("route",data.Id);
                                                             ConfirmDelete( "route",data.Id );

                        }
                    }

                )"></RadzenButton>
                    |
                    <RadzenButton Shade="Shade.Lighter" Icon="edit" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) =>
                    {
                        if (data.Id  != 0 && data.Route_name != null)
                        {
                            EditCatalogData("route", data.Id, data.Route_name);
                        }
                    }
                )"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
}
else if (listsubstance != null && listsubstance.Count > 0 && type == "substance")
{

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                    FilterMode="FilterMode.Simple" PageSize="12" AllowPaging="true" AllowSorting="true" Data="@listsubstance"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And" Style="height:550px">
        <Columns>
            <RadzenDataGridColumn TItem="SubstanceModel" Property="Id" Title="Mã hoạt chất" />
            <RadzenDataGridColumn TItem="SubstanceModel" Property="Sub_name" Title="Tên hoạt chất" />
            <RadzenDataGridColumn TItem="SubstanceModel" Property="Unit_name" Title="Dạng bào chế" />
            <RadzenDataGridColumn TItem="SubstanceModel" Property="Route_name" Title="Đường dùng" />
            <RadzenDataGridColumn TItem="SubstanceModel" Property="Content" Title="Liều lượng" />
            <RadzenDataGridColumn TItem="SubstanceModel" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FrozenPosition="FrozenColumnPosition.Right" Width="110px">
                <Template Context="data">
                    <RadzenButton Shade="Shade.Lighter" Icon="dangerous" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Warning" Click="@((args) =>
                    {
                        if (data.Id  != 0)
                        {
                            //DeleteCatalogData("substance",(int)data.Id);
                              ConfirmDelete( "substance",(int)data.Id );
                        }
                    }

                )"></RadzenButton>
                    |
                    <RadzenButton Shade="Shade.Lighter" Icon="edit" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) =>

                    {
                        if (data.Id  != 0 && data.Sub_name != null && data.Unit_name != null && data.Route_name != null && data.Content != null)
                        {

                            EditSubstance(data.Id,data.Sub_name ,data.Unit_name, data.Route_name, data.Content);
                        }
                    }
                )"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
}
else if (listunit != null && listunit.Count > 0 && type == "unit")
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                    FilterMode="FilterMode.Simple" PageSize="12" AllowPaging="true" AllowSorting="true" Data="@listunit"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And" Style="height:550px">
        <Columns>
            <RadzenDataGridColumn TItem="UnitModel" Property="Id" Title="Mã đơn vị   " />
            <RadzenDataGridColumn TItem="UnitModel" Property="Unit_name" Title="Tên đơn vị   " />
            <RadzenDataGridColumn TItem="UnitModel" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FrozenPosition="FrozenColumnPosition.Right" Width="110px">
                <Template Context="data">
                    <RadzenButton Shade="Shade.Lighter" Icon="dangerous" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Warning" Click="@((args) =>
                    {
                        if (data.Id  != 0)
                        {
                            //DeleteCatalogData("unit",data.Id);
                            ConfirmDelete( "unit",data.Id );

                        }
                    }

                )"></RadzenButton>
                    |
                    <RadzenButton Shade="Shade.Lighter" Icon="edit" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) =>

                    {
                        if (data.Id  != 0 && data.Unit_name != null)
                        {
                            EditCatalogData("unit", data.Id, data.Unit_name);
                        }
                    }
                )"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
}
else if (listdosage_limit != null && listdosage_limit.Count > 0 && type == "dosage_limit")
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                    FilterMode="FilterMode.Simple" PageSize="12" AllowPaging="true" AllowSorting="true" Data="@listdosage_limit"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And" Style="height:550px">
        <Columns>
            <RadzenDataGridColumn TItem="Dosage_limitModel" Property="Id" Title="Mã liều dùng" />
            <RadzenDataGridColumn TItem="Dosage_limitModel" Property="Sub_name" Title="Hoạt chất" />
            <RadzenDataGridColumn TItem="Dosage_limitModel" Property="Max_dosage" Title="Liều dùng tối đa" />
            <RadzenDataGridColumn TItem="Dosage_limitModel" Property="Duration" Title="Khoảng" />
            <RadzenDataGridColumn TItem="Dosage_limitModel" Property="Time_duration" Title="Thời gian của khoảng" />
            <RadzenDataGridColumn TItem="Dosage_limitModel" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FrozenPosition="FrozenColumnPosition.Right" Width="110px">
                <Template Context="data">
                    <RadzenButton Shade="Shade.Lighter" Icon="dangerous" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Warning" Click="@((args) =>
                    {
                        if (data.Substance_id  != 0)
                        {
                            //DeleteCatalogData("dosage_limit",(int)data.Substance_id);
                            ConfirmDelete( "dosage_limit",(int)data.Substance_id );


                        }
                    }
                )"></RadzenButton>
                    |
                    <RadzenButton Shade="Shade.Lighter" Icon="edit" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) =>
                    {
                        if (data != null)
                        {
                            EditDosage(data);
                        }
                    }
                )"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else if (listallergy != null && listallergy.Count > 0 && type == "allergy")
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                    FilterMode="FilterMode.Simple" PageSize="12" AllowPaging="true" AllowSorting="true" Data="@listallergy"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And" Style="height:550px">
        <Columns>
            <RadzenDataGridColumn TItem="AllergyModel" Property="Id" Title="Mã dị ứng" />
            <RadzenDataGridColumn TItem="AllergyModel" Property="Sub_name" Title="Hoạt chất" />
            <RadzenDataGridColumn TItem="AllergyModel" Property="Allergy_date" Title="Thời gian bắt đầu dị ứng" />
            <RadzenDataGridColumn TItem="AllergyModel" Property="Symptoms" Title="Triệu chứng dị ứng" />
            <RadzenDataGridColumn TItem="AllergyModel" Property="Severity_level" Title="Mức độ" />
            <RadzenDataGridColumn TItem="AllergyModel" Property="Treatment_measures" Title="Biện pháp" />
            <RadzenDataGridColumn TItem="AllergyModel" Property="Alternative_drugs" Title="Thuốc thay thế" />

            <RadzenDataGridColumn TItem="AllergyModel" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" FrozenPosition="FrozenColumnPosition.Right" Width="110px">

                <Template Context="data">
                    <RadzenButton Shade="Shade.Lighter" Icon="dangerous" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Warning" Click="@((args) =>
                    {
                        if (data.Substance_id  != 0)
                        {
                            //DeleteCatalogData("allergy",(int)data.Substance_id);
                            ConfirmDelete( "allergy",(int)data.Substance_id );


                        }
                    }
                )"></RadzenButton>
                    |
                    <RadzenButton Shade="Shade.Lighter" Icon="edit" Variant="Variant.Flat" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) =>
                    {
                        if (data != null)
                        {
                            EditAllergy(data);
                        }
                    }
                )"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>


        </Columns>
    </RadzenDataGrid>
}
else
{
    <span>Không có dữ liệu</span>
}




@code {

    private bool isConnected;
    private ResponLogin us = new ResponLogin();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            bool isReturn = await ReturnIndex();
            if (isReturn)
            {
                NavigationManager.NavigateTo("/");


            }
            else
            {
                isConnected = true;
                await LoadTypeCatalog();

            }
            StateHasChanged();
        }
    }

    public async Task<bool> ReturnIndex()
    {
        us = await sessionStorage.GetItemAsync<ResponLogin>("us");
        if (us == null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private async Task ButtonAdd(RadzenSplitButtonItem item)
    {
        if (item != null)
        {
            if (item.Value == "1")
            {
                await ModaAddUnit();
            }
            else if (item.Value == "2")
            {
                await ModalAddSubtance();
            }
            else if (item.Value == "3")
            {
                await ModalAddDosage();
            }
            else if (item.Value == "4")
            {
                await ModalAddAllergy();
            }
        }
        else
        {

        }
    }

    private async Task ButtonClearCache(RadzenSplitButtonItem item)
    {
        if (item != null)
        {
            if (item.Value == "1")
            {
                await ClearCache("category_medical_interaction");
            }
            else if (item.Value == "2")
            {
                await ClearCache("category_medications");
            }
            else if (item.Value == "3")
            {
                await ClearCache("category_substance");
            }
            else
            {
                await ClearCache("all");
            }
        }
        else
        {

        }
    }

    public class CatalogData
    {
        public string? Type { set; get; }
        public string? Display { set; get; }
    }
    private List<CatalogData> catalogdata = new List<CatalogData>()
{
         //Add Type, Display
        new CatalogData() { Type = "duration", Display = "Thời gian" },
        new CatalogData() { Type = "route", Display = "Đường dùng" },
        new CatalogData() { Type = "substance", Display = "Hoạt chất" },
        new CatalogData() { Type = "unit", Display = "Đơn vị" },
        new CatalogData() { Type = "dosage_limit", Display = "Liều dùng của thuốc" },
        new CatalogData() { Type = "allergy", Display = "Dị ứng" }

};
    private List<UnitModel> listunit_load = new List<UnitModel>();
    private List<RouteModel> listroute_load = new List<RouteModel>();
    private List<SubstanceModel> listsub_load = new List<SubstanceModel>();
    private List<DurationModel> listduration_load = new List<DurationModel>();

    private async Task LoadTypeCatalog()
    {
    //Load list listunit_load,...
        var result = await CatalogService.GetCatalog("unit");
        if (result != null && result.Code == 200)
        {
            listunit_load = JsonConvert.DeserializeObject<List<UnitModel>>(result.Value.ToString());
        }
        else if (result?.Code == 404)
        {
            listunit_load = new List<UnitModel>();
        }

            //Load list route
        var result1 = await CatalogService.GetCatalog("route");
        if (result1 != null && result1.Code == 200)
        {
            listroute_load = JsonConvert.DeserializeObject<List<RouteModel>>(result1.Value.ToString());
        }
        else if (result1?.Code == 404)
        {
            listroute_load = new List<RouteModel>();
        }
            //Load list subtance
        var result2 = await CatalogService.GetCatalog("substance");
        if (result2 != null && result2.Code == 200)
        {
            listsub_load = JsonConvert.DeserializeObject<List<SubstanceModel>>(result2.Value.ToString());

            foreach (var item1 in listsub_load)
            {
                UnitModel? unit = listunit_load.FirstOrDefault(item => item.Id == item1.Unit_id);
                RouteModel? route = listroute_load.FirstOrDefault(item => item.Id == item1.Route_id);
                item1.Unit_name = unit?.Unit_name;
                item1.Route_name = route?.Route_name;

            }
        }
        else if (result2?.Code == 404)
        {
            listsub_load = new List<SubstanceModel>();
        }
            //Load list duration
        var result3 = await CatalogService.GetCatalog("duration");
        if (result3 != null && result3.Code == 200)
        {
            listduration_load = JsonConvert.DeserializeObject<List<DurationModel>>(result3.Value.ToString());
        }
        else if (result3?.Code == 404)
        {
            listduration_load = new List<DurationModel>();
        }
            //Load list allergy
        var result4 = await CatalogService.GetCatalog("allergy");
        if (result4 != null && result4.Code == 200)
        {
            listallergy = JsonConvert.DeserializeObject<List<AllergyModel>>(result4.Value.ToString());
        }
        else if (result4?.Code == 404)
        {
            listallergy = new List<AllergyModel>();
        }

    }
    private string type = "";
    private List<DurationModel> listduration = new List<DurationModel>();
    private List<RouteModel> listroute = new List<RouteModel>();
    private List<SubstanceModel> listsubstance = new List<SubstanceModel>();
    private List<UnitModel> listunit = new List<UnitModel>();
    private List<Dosage_limitModel> listdosage_limit = new List<Dosage_limitModel>();
    private List<AllergyModel> listallergy = new List<AllergyModel>();

    private async Task ChangeType()
    {
        if (type != "")
        {
            if (type == "duration")
            {
                var result = await CatalogService.GetCatalog(type);
                if (result != null && result.Code == 200)
                {
                    listduration = JsonConvert.DeserializeObject<List<DurationModel>>(result.Value.ToString());
                }
                else if (result?.Code == 404)
                {
                    listduration = new List<DurationModel>();
                }
            }
            else if (type == "route")
            {
                var result = await CatalogService.GetCatalog(type);
                if (result != null && result?.Code == 200)
                {
                    listroute = JsonConvert.DeserializeObject<List<RouteModel>>(result.Value.ToString());
                }
                else if (result?.Code == 404)
                {
                    listroute = new List<RouteModel>();
                }
            }
            else if (type == "substance")
            {
                var result = await CatalogService.GetCatalog(type);
                if (result != null && result.Code == 200)
                {
                    listsubstance = JsonConvert.DeserializeObject<List<SubstanceModel>>(result.Value.ToString());

                    foreach (var item1 in listsubstance)
                    {
                        UnitModel? unit = listunit_load.FirstOrDefault(item => item.Id == item1.Unit_id);
                        RouteModel? route = listroute_load.FirstOrDefault(item => item.Id == item1.Route_id);
                        item1.Unit_name = unit?.Unit_name;
                        item1.Route_name = route?.Route_name;

                    }
                }
                else if (result?.Code == 404)
                {
                    listsubstance = new List<SubstanceModel>();
                }
            }
            else if (type == "unit")
            {
                var result = await CatalogService.GetCatalog(type);
                if (result != null && result.Code == 200)
                {
                    listunit = JsonConvert.DeserializeObject<List<UnitModel>>(result.Value.ToString());
                }
                else if (result?.Code == 404)
                {
                    listunit = new List<UnitModel>();
                }
            }
            else if (type == "dosage_limit")
            {
                var result = await CatalogService.GetCatalog(type);
                if (result != null && result.Code == 200)
                {
                    listdosage_limit = JsonConvert.DeserializeObject<List<Dosage_limitModel>>(result.Value.ToString());
                    foreach (var item1 in listdosage_limit)
                    {

                        SubstanceModel? sub = listsub_load.FirstOrDefault(item => item.Id == item1.Substance_id);
                        DurationModel? dura = listduration_load.FirstOrDefault(item => item.Id == item1.Duration_id);
                        item1.Sub_name = sub?.Sub_name;
                        item1.Duration = dura?.Dura_name;

                    }

                }
                else if (result?.Code == 404)
                {
                    listdosage_limit = new List<Dosage_limitModel>();
                }

            }
            else if (type == "allergy")
            {
                var result = await CatalogService.GetCatalog(type);
                if (result != null && result.Code == 200)
                {
                    listallergy = JsonConvert.DeserializeObject<List<AllergyModel>>(result.Value.ToString());

                    foreach (var item1 in listallergy)
                    {
                        SubstanceModel? sub = listsub_load.FirstOrDefault(item => item.Id == item1.Substance_id);
                        item1.Sub_name = sub?.Sub_name;

                    }
                }
                else if (result?.Code == 404)
                {
                    listallergy = new List<AllergyModel>();
                }

            }

        }
    }
    private List<CatalogData> catalogdatamodal = new List<CatalogData>()
{
        new CatalogData { Type = "unit", Display = "Dạng bào chế" },
        new CatalogData { Type = "route", Display = "Đường dùng" },
        new CatalogData { Type = "duration", Display = "Thời gian" }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                };
    private Variant variant = Variant.Outlined;

    private async Task ModaAddUnit()
    {
        string type = "";
        string display = "";
        var result = await DialogService.OpenAsync("Thêm dữ liệu danh mục", ds =>
                                                                    {
    return @<RadzenStack Gap="1.5rem">
        @if (catalogdatamodal != null)
    {
        <RadzenStack>
            <RadzenFormField Text="Danh mục" Variant="@variant">
                <RadzenDropDown @bind-Value="@type" Data=@catalogdatamodal TextProperty="Display" ValueProperty="Type" Placeholder="Chọn danh mục" AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" />
            </RadzenFormField>
        </RadzenStack>
    }
        <RadzenStack>
            <RadzenFormField Text="Giá trị cụ thể" Variant="@variant">
                <RadzenTextBox @bind-Value="@display" />
            </RadzenFormField>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Thêm" Click="() => SaveCatalogData(type, display)" Style="width: 120px;" />
        </RadzenStack>
    </RadzenStack>
                                                                                                                                                                                                                                                                                                                                ;
                                                                                                                                });
    }

    private async Task Reload()
    {
        await ChangeType();
        StateHasChanged();
    }
    private async Task SaveCatalogData(string type, string display)
    {
        var result = await CatalogService.PostCatalog(type, display);
        if (result != null && result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            DialogService.Close();
            await Reload();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result?.Message);
        }
    }

    private async void DeleteCatalogData(string type, int id)
    {
        var result = await CatalogService.DeleteCatalog(type, id);
        if (result != null && result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            await Reload();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result?.Message);
        }
    }

    private async void EditCatalogData(string type, int id, string display)
    {

        var result = await DialogService.OpenAsync("Cập nhật dữ liệu danh mục", ds =>
                                                                    {

    return @<RadzenStack Gap="1.5rem">
        @if (catalogdatamodal != null)
    {
        <RadzenStack>
            <RadzenFormField Text="Danh mục" Variant="@variant">
                <RadzenDropDown @bind-Value="@type" Data=@catalogdatamodal TextProperty="Display" ValueProperty="Type" Placeholder="Chọn danh mục" AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" Disabled />
            </RadzenFormField>
        </RadzenStack>
    }
        <RadzenStack>
            <RadzenFormField Text="Giá trị cụ thể" Variant="@variant">
                <RadzenTextBox @bind-Value="@display" />
            </RadzenFormField>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Cập nhật" Click="() => UpdateCatalogData(type, id, display)" Style="width: 120px;" />
        </RadzenStack>
    </RadzenStack>;
                                                                                                                                                                                            });
    }

    private async Task UpdateCatalogData(string type, int id, string display)
    {
        var result = await CatalogService.PutCatalog(type, id, display);
        if (result != null && result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            DialogService.Close();
            await Reload();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result?.Message);
        }

    }

    private async Task ModalAddSubtance()
    {
        SubstanceModel sub = new SubstanceModel();

        var result = await DialogService.OpenAsync("Thêm dữ liệu danh mục hoạt chất", ds =>
                                                                                                                                {
    return @<RadzenStack Gap="1.5rem">

        <RadzenStack>
            <RadzenFormField Text="Tên hoạt chất" Variant="@variant">
                <RadzenTextBox @bind-Value="@sub.Sub_name" />
            </RadzenFormField>
        </RadzenStack>

        @if(listunit_load != null)
    {
        <RadzenStack>
            <RadzenFormField Text="Dạng bào chế" Variant="@variant">
                <RadzenDropDown @bind-Value="@sub.Unit_name" Data=@listunit_load TextProperty="Unit_name" ValueProperty="Unit_name" Placeholder="Chọn dạng bào chế " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" />
            </RadzenFormField>
        </RadzenStack>
    }
        @if(listroute_load != null)
    {
        <RadzenStack>
            <RadzenFormField Text="Đường dùng" Variant="@variant">
                <RadzenDropDown @bind-Value="@sub.Route_name" Data=@listroute_load TextProperty="Route_name" ValueProperty="Route_name" Placeholder="Chọn đường dùng " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" />
            </RadzenFormField>
        </RadzenStack>
    }
        <RadzenStack>
            <RadzenFormField Text="Liều lượng" Variant="@variant">
                <RadzenTextBox @bind-Value="@sub.Content" />
            </RadzenFormField>
        </RadzenStack>


        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Thêm" Click="() => SaveSubstance(sub)" Style="width: 120px;" />
        </RadzenStack>
    </RadzenStack>
                                                                                                                                ;
                                                                                                                                                                                                                                                });

    }

    private async void SaveSubstance(SubstanceModel sub)
    {
        var result = await CatalogService.PostSubtance(sub);
        if (result != null && result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            DialogService.Close();
            await Reload();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result?.Message);
        }
    }

    private async void EditSubstance(long id, string name, string unit_name, string route_name, string content)
    {

        var result = await DialogService.OpenAsync("Cập nhật dữ liệu danh mục hoạt chất", ds =>
                                                                                                                          {
      return @<RadzenStack Gap="1.5rem">

        <RadzenStack>
            <RadzenFormField Text="Tên hoạt chất" Variant="@variant">
                <RadzenTextBox @bind-Value="@name" />
            </RadzenFormField>
        </RadzenStack>

        @if(listunit_load != null)
    {
        <RadzenStack>
            <RadzenFormField Text="Dạng bào chế" Variant="@variant">
                <RadzenDropDown @bind-Value="@unit_name" Data=@listunit_load TextProperty="Unit_name" ValueProperty="Unit_name" Placeholder="Chọn dạng bào chế " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" />
            </RadzenFormField>
        </RadzenStack>
    }
        @if(listroute_load != null)
    {
        <RadzenStack>
            <RadzenFormField Text="Đường dùng" Variant="@variant">
                <RadzenDropDown @bind-Value="@route_name" Data=@listroute_load TextProperty="Route_name" ValueProperty="Route_name" Placeholder="Chọn đường dùng " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" />
            </RadzenFormField>
        </RadzenStack>
    }
        <RadzenStack>
            <RadzenFormField Text="Liều lượng" Variant="@variant">
                <RadzenTextBox @bind-Value="@content" />
            </RadzenFormField>
        </RadzenStack>


        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Cập nhật" Click="() => UpdateSubstance( id,  name, unit_name  , route_name, content)" Style="width: 120px;" />
        </RadzenStack>
    </RadzenStack>
                                                                        ;
                                                                                                                      });
    }

    private async void UpdateSubstance(long id, string name, string unit_name, string route_name, string content)
    {
        var result = await CatalogService.PutSubtance(id, name, unit_name, route_name, content);
        if (result != null && result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            DialogService.Close();
            await Reload();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result?.Message);
        }
    }

    DosageLimit dosage = new DosageLimit();

    private async Task ModalAddDosage()
    {

        dosage = new DosageLimit();
        long id_sub = 0;
        string type = "substance";
        var result = await DialogService.OpenAsync("Thêm dữ liệu liều dùng", ds =>
                        {
                            return@<RadzenStack Gap="1.5rem">

        @if(listsub_load != null)
    {
        <RadzenStack>
            <RadzenFormField Text="Hoạt chất" Variant="@variant">

                <RadzenDropDownDataGrid @bind-Value="id_sub" Data=@listsub_load TextProperty="Sub_name" ValueProperty="Id" Placeholder="Chọn hoạt chất" AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Change="()=> ChangSubstance(id_sub,type) " EmptyText="Không có dữ liệu" AllowFiltering="true" Fi>
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="Sub_name" Title="Tên hoạt chất" Width="140px" />
                        <RadzenDropDownDataGridColumn Property="Unit_name" Title="Dạng bào chế" Width="80px" />
                        <RadzenDropDownDataGridColumn Property="Route_name" Title="Đường dùng" Width="80px" />
                        <RadzenDropDownDataGridColumn Property="Content" Title="Liều lượng" Width="100px" />
                    </Columns>
                </RadzenDropDownDataGrid>

            </RadzenFormField>
        </RadzenStack>
    }


        <RadzenRow>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                @if(listroute_load != null)
            {
                <RadzenStack>
                    <RadzenFormField Text="Đường dùng" Variant="@variant">
                        <RadzenDropDown @bind-Value="dosage.Route" Disabled Data=@listroute_load TextProperty="Route_name" ValueProperty="Route_name" Placeholder="Chọn đường dùng " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowFiltering="true" />
                    </RadzenFormField>
                </RadzenStack>
            }
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Liều lượng" Variant="@variant">
                        <RadzenTextBox @bind-Value="dosage.Content" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">

                @if(listunit_load != null)
            {
                <RadzenStack>
                    <RadzenFormField Text="Dạng bào chế" Variant="@variant">
                        <RadzenDropDown @bind-Value="@dosage.Unit" Disabled Data=@listunit_load TextProperty="Unit_name" ValueProperty="Unit_name" Placeholder="Chọn dạng bào chế " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowFiltering="true" />
                    </RadzenFormField>
                </RadzenStack>
            }
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack>
            <RadzenFormField Text="Liều lượng tối đa" Variant="@variant">
                <RadzenNumeric @bind-Value="dosage.Max_dosage" />
            </RadzenFormField>
        </RadzenStack>
        @if(listduration_load != null)
    {
        <RadzenStack>
            <RadzenFormField Text="Khoảng" Variant="@variant">
                <RadzenDropDown @bind-Value="dosage.Duration" Data=@listduration_load TextProperty="Dura_name" ValueProperty="Dura_name" Placeholder="Chọn khoảng " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" />
            </RadzenFormField>
        </RadzenStack>
    }
        <RadzenStack>
            <RadzenFormField Text="Thời gian của khoảng" Variant="@variant">
                <RadzenNumeric @bind-Value="dosage.Time_duration" />
            </RadzenFormField>
        </RadzenStack>


        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Thêm" Click="() => SaveDosage(dosage)" Style="width: 120px;" />
        </RadzenStack>

    </RadzenStack>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ;
                        });

    }

    private void ChangSubstance(long id, string type)
    {
        if (id != 0)
        {

            var selectedSubstance = listsub_load.FirstOrDefault(sub => sub.Id == id);
            if (selectedSubstance != null)
            {
                if (type == "substance")
                {

                    dosage.Substance = selectedSubstance.Sub_name;
                    dosage.Content = selectedSubstance.Content;
                    dosage.Unit = selectedSubstance.Unit_name;
                    dosage.Route = selectedSubstance.Route_name;
                    InvokeAsync(() => { DialogService.Refresh(); });
                }
                else if (type == "allergy")
                {
                    allergy.Sub_name = selectedSubstance.Sub_name;
                    allergy.Content = selectedSubstance.Content;
                    allergy.Unit = selectedSubstance.Unit_name;
                    allergy.Route = selectedSubstance.Route_name;
                    InvokeAsync(() => { DialogService.Refresh(); });
                }
            }



        }
        else if (id == 0)
        {
            if (type == "substance")
            {
                dosage.Substance = "";
                dosage.Content = "";
                dosage.Unit = "";
                dosage.Route = "";
                InvokeAsync(() => { DialogService.Refresh(); });
            }
            else if (type == "allergy")
            {
                allergy.Sub_name = "";
                allergy.Content = "";
                allergy.Unit = "";
                allergy.Route = "";
                InvokeAsync(() => { DialogService.Refresh(); });
            }

        }
    }

    private async void SaveDosage(DosageLimit dosage)
    {
        var result = await CatalogService.PostDosage(dosage);
        if (result != null && result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            DialogService.Close();
            await Reload();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result?.Message);
        }
    }

    private async void EditDosage(Dosage_limitModel dosage_edit)
    {
        long id_sub = 0;
        string type = "substance";
        dosage = new DosageLimit();
        var result1 = await CatalogService.GetDetailsDosage(dosage_edit.Substance_id);
        Dosage_limitModel detailsdosage = new Dosage_limitModel();
        if (result1 != null && result1.Code == 200)
        {
            detailsdosage = JsonConvert.DeserializeObject<Dosage_limitModel>(result1.Value.ToString());
        }
        if (detailsdosage != null)
        {
            id_sub = detailsdosage.Substance_id;
            dosage.Substance = detailsdosage.Sub_name;
            dosage.Route = detailsdosage.Route;
            dosage.Max_dosage = detailsdosage.Max_dosage;
            dosage.Duration = detailsdosage.Duration;
            dosage.Time_duration = detailsdosage.Time_duration;
            dosage.Unit = detailsdosage.Unit;

        }

        var result = await DialogService.OpenAsync("Cập nhật dữ liệu liều dùng", ds =>
                                                                                                {
    return @<RadzenStack Gap="1.5rem">
        @if(listsub_load != null)
    {
        <RadzenStack>
            <RadzenFormField Text="Hoạt chất" Variant="@variant">
                <RadzenDropDownDataGrid @bind-Value="id_sub" Data=@listsub_load TextProperty="Sub_name" ValueProperty="Id" Placeholder="Chọn hoạt chất" AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowFiltering="true" Change="()=> ChangSubstance(id_sub,type) " Disabled>
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="Sub_name" Title="Tên hoạt chất" Width="140px" />
                        <RadzenDropDownDataGridColumn Property="Unit_name" Title="Dạng bào chế" Width="80px" />
                        <RadzenDropDownDataGridColumn Property="Route_name" Title="Đường dùng" Width="80px" />
                        <RadzenDropDownDataGridColumn Property="Content" Title="Liều lượng" Width="100px" />
                    </Columns>
                </RadzenDropDownDataGrid>
            </RadzenFormField>
        </RadzenStack>
    }

        <RadzenRow>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                @if(listroute_load != null)
            {
                <RadzenStack>
                    <RadzenFormField Text="Đường dùng" Variant="@variant">
                        <RadzenDropDown @bind-Value="dosage.Route" Disabled Data=@listroute_load TextProperty="Route_name" ValueProperty="Route_name" Placeholder="Chọn đường dùng " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowFiltering="true" />
                    </RadzenFormField>
                </RadzenStack>
            }
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Liều lượng" Variant="@variant">
                        <RadzenTextBox @bind-Value="dosage.Content" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">

                @if(listunit_load != null)
            {
                <RadzenStack>
                    <RadzenFormField Text="Dạng bào chế" Variant="@variant">
                        <RadzenDropDown @bind-Value="@dosage.Unit" Disabled Data=@listunit_load TextProperty="Unit_name" ValueProperty="Unit_name" Placeholder="Chọn dạng bào chế " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowFiltering="true" />
                    </RadzenFormField>
                </RadzenStack>
            }
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack>
            <RadzenFormField Text="Liều lượng tối đa" Variant="@variant">
                <RadzenNumeric @bind-Value="dosage.Max_dosage" />
            </RadzenFormField>
        </RadzenStack>
        @if(listduration_load != null)
    {
        <RadzenStack>
            <RadzenFormField Text="Khoảng" Variant="@variant">
                <RadzenDropDown @bind-Value="dosage.Duration" Data=@listduration_load TextProperty="Dura_name" ValueProperty="Dura_name" Placeholder="Chọn khoảng " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowFiltering="true" />
            </RadzenFormField>
        </RadzenStack>
    }
        <RadzenStack>
            <RadzenFormField Text="Thời gian của khoảng" Variant="@variant">
                <RadzenNumeric @bind-Value="dosage.Time_duration" />
            </RadzenFormField>
        </RadzenStack>


        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Cập nhật" Click="() => UpdateDosage(id_sub,dosage)" Style="width: 120px;" />
        </RadzenStack>

    </RadzenStack>
                                               ;
                                                                                                                                                            });
    }

    private async Task UpdateDosage(long id, DosageLimit dosage)
    {
        var result = await CatalogService.PutDosage(id, dosage);
        if (result != null && result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            DialogService.Close();
            await Reload();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result?.Message);
        }
    }

    private List<SynchronizedModel> listsyncSuccess = new List<SynchronizedModel>();
    private List<SynchronizedModel> listsyncFailed = new List<SynchronizedModel>();

    private async Task GetSync()
    {
        var result = await CatalogService.GetSynchronized(us.Token!);
        if (result != null && result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);

            var resultSynchronized = JsonConvert.DeserializeObject<ResultSynchronized>(result.Value.ToString());
            if (resultSynchronized != null)
            {
                listsyncSuccess = resultSynchronized.Success;
                listsyncFailed = resultSynchronized.Failed;

                var resultmodal = await DialogService.OpenAsync("Dữ liệu đồng bộ", ds =>
                                                                    {
    return @<RadzenRow>
        <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
            <RadzenText TextStyle="TextStyle.H6">Hoạt chất thêm không thành công</RadzenText>
            <RadzenRow>

                @if (listsyncFailed != null && listsyncFailed.Count > 0)
            {

                <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowVirtualization="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                Data="@listsyncFailed" TItem="SynchronizedModel" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" Style="height:550px">
                    <Columns>
                        <RadzenDataGridColumn TItem="SynchronizedModel" Property="Content" Title="Hàm lượng" />
                        <RadzenDataGridColumn TItem="SynchronizedModel" Property="Display" Title="Hiển thị" />
                        <RadzenDataGridColumn TItem="SynchronizedModel" Property="Unit" Title="Đơn vị" />
                        <RadzenDataGridColumn TItem="SynchronizedModel" Property="Used" Title="Sử dụng" />

                    </Columns>
                </RadzenDataGrid>
            } else{

                <span> Không có dữ liệu </span>
            }
            </RadzenRow>
        </RadzenColumn>
        <RadzenColumn SizeLG="6" SizeMD="6" SizeSM="12" Size="12">
            <RadzenText TextStyle="TextStyle.H6">Hoạt chất thêm  thành công</RadzenText>
            <RadzenRow>
                @if (listsyncSuccess != null && listsyncSuccess.Count > 0)
            {
                <RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowVirtualization="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                Data="@listsyncSuccess" TItem="SynchronizedModel" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" Style="height:550px">
                    <Columns>
                        <RadzenDataGridColumn TItem="SynchronizedModel" Property="Content" Title="Hàm lượng" />
                        <RadzenDataGridColumn TItem="SynchronizedModel" Property="Display" Title="Hiển thị" />
                        <RadzenDataGridColumn TItem="SynchronizedModel" Property="Unit" Title="Đơn vị" />
                        <RadzenDataGridColumn TItem="SynchronizedModel" Property="Used" Title="Sử dụng" />

                    </Columns>
                </RadzenDataGrid>
            }else{
                <span> Không có dữ liệu </span>

            }
            </RadzenRow>
        </RadzenColumn>
    </RadzenRow>
                            ;
                                                                }, new DialogOptions() { Width = "85%" });
            }

        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result?.Message);
        }

    }

    private async Task ClearCache(string type)
    {
        var result = await CatalogService.DeleteCacheSynchronized(type);
        if (result != null && result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result?.Message);
        }
    }

    AllergyModel allergy = new AllergyModel();
    private async Task ModalAddAllergy()
    {

        allergy = new AllergyModel();
        long id_sub = 0;
        string type = "allergy";
        var result = await DialogService.OpenAsync("Thêm dữ liệu dị ứng", ds =>
                        {
                            return@<RadzenStack Gap="1.5rem">
        <RadzenRow>
            <RadzenColumn SizeLG="12" SizeMD="12" SizeSM="12" Size="12">
                @if(listsub_load != null)
            {
                <RadzenStack>
                    <RadzenFormField Text="Hoạt chất" Variant="@variant">

                        <RadzenDropDownDataGrid @bind-Value="id_sub" Data=@listsub_load TextProperty="Sub_name" ValueProperty="Id" Placeholder="Chọn hoạt chất" AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                Change="()=> ChangSubstance(id_sub,type) " EmptyText="Không có dữ liệu" AllowFiltering="true" Fi>
                            <Columns>
                                <RadzenDropDownDataGridColumn Property="Sub_name" Title="Tên hoạt chất" Width="140px" />
                                <RadzenDropDownDataGridColumn Property="Unit_name" Title="Dạng bào chế" Width="80px" />
                                <RadzenDropDownDataGridColumn Property="Route_name" Title="Đường dùng" Width="80px" />
                                <RadzenDropDownDataGridColumn Property="Content" Title="Liều lượng" Width="100px" />
                            </Columns>
                        </RadzenDropDownDataGrid>

                    </RadzenFormField>
                </RadzenStack>
            }
            </RadzenColumn>



        </RadzenRow>

        <RadzenRow>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                @if(listroute_load != null)
            {
                <RadzenStack>
                    <RadzenFormField Text="Đường dùng" Variant="@variant">
                        <RadzenDropDown @bind-Value="allergy.Route" Disabled Data=@listroute_load TextProperty="Route_name" ValueProperty="Route_name" Placeholder="Chọn đường dùng " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowFiltering="true" />
                    </RadzenFormField>
                </RadzenStack>
            }
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Liều lượng" Variant="@variant">
                        <RadzenTextBox @bind-Value="allergy.Content" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">

                @if(listunit_load != null)
            {
                <RadzenStack>
                    <RadzenFormField Text="Dạng bào chế" Variant="@variant">
                        <RadzenDropDown @bind-Value="@allergy.Unit" Disabled Data=@listunit_load TextProperty="Unit_name" ValueProperty="Unit_name" Placeholder="Chọn dạng bào chế " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowFiltering="true" />
                    </RadzenFormField>
                </RadzenStack>
            }
            </RadzenColumn>
        </RadzenRow>





        <RadzenStack>
            <RadzenFormField Text="Thời gian bắt đầu dị ứng" Variant="@variant">
                <RadzenTextBox @bind-Value="allergy.Allergy_date" />
            </RadzenFormField>
        </RadzenStack>

        <RadzenStack>
            <RadzenFormField Text="Mô tả triệu chứng dị ứng" Variant="@variant">
                <RadzenTextBox @bind-Value="allergy.Symptoms" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Mức độ" Variant="@variant">
                <RadzenTextBox @bind-Value="allergy.Severity_level" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Biện pháp" Variant="@variant">
                <RadzenTextBox @bind-Value="allergy.Treatment_measures" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Các loại thuốc thay thế" Variant="@variant">
                <RadzenTextBox @bind-Value="allergy.Alternative_drugs" />
            </RadzenFormField>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Thêm" Click="() => SaveAllergy(allergy)" Style="width: 120px;" />
        </RadzenStack>

    </RadzenStack>
    ;
                        });
    }

    private async Task SaveAllergy(AllergyModel allergy)
    {
        var result = await CatalogService.PostAllergy(allergy);
        if (result != null && result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            DialogService.Close();
            await Reload();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result?.Message);
        }
    }

    private async void EditAllergy(AllergyModel allergy)
    {
        long id_sub = 0;
        string type = "allergy";
        AllergyModel? aller = listallergy.FirstOrDefault(item => item.Id == allergy.Id);
        SubstanceModel? sub = listsub_load.FirstOrDefault(item => item.Id == allergy.Substance_id);
        AllergyModel all = new AllergyModel();
        if (aller != null && sub != null)
        {

            id_sub = aller.Substance_id;
            all.Sub_name = aller.Sub_name;
            all.Unit = sub.Unit_name;
            all.Route = sub.Route_name;
            all.Content = sub.Content;
            all.Allergy_date = aller.Allergy_date;
            all.Symptoms = aller.Symptoms;
            all.Severity_level = aller.Severity_level;
            all.Treatment_measures = aller.Treatment_measures;
            all.Alternative_drugs = aller.Alternative_drugs;

        }


        var result = await DialogService.OpenAsync("Cập nhật dữ liệu dị ứng", ds =>
                        {
                            return@<RadzenStack Gap="1.5rem">
        <RadzenRow>
            <RadzenColumn SizeLG="12" SizeMD="12" SizeSM="12" Size="12">
                @if(listsub_load != null)
            {
                <RadzenStack>
                    <RadzenFormField Text="Hoạt chất" Variant="@variant">

                        <RadzenDropDownDataGrid @bind-Value="id_sub" Data=@listsub_load TextProperty="Sub_name" ValueProperty="Id" Placeholder="Chọn hoạt chất" AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                Change="()=> ChangSubstance(id_sub,type) " EmptyText="Không có dữ liệu" AllowFiltering="true" Disabled>
                            <Columns>
                                <RadzenDropDownDataGridColumn Property="Sub_name" Title="Tên hoạt chất" Width="140px" />
                                <RadzenDropDownDataGridColumn Property="Unit_name" Title="Dạng bào chế" Width="80px" />
                                <RadzenDropDownDataGridColumn Property="Route_name" Title="Đường dùng" Width="80px" />
                                <RadzenDropDownDataGridColumn Property="Content" Title="Liều lượng" Width="100px" />
                            </Columns>
                        </RadzenDropDownDataGrid>

                    </RadzenFormField>
                </RadzenStack>
            }
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                @if(listroute_load != null)
            {
                <RadzenStack>
                    <RadzenFormField Text="Đường dùng" Variant="@variant">
                        <RadzenDropDown @bind-Value="all.Route" Disabled Data=@listroute_load TextProperty="Route_name" ValueProperty="Route_name" Placeholder="Chọn đường dùng " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowFiltering="true" />
                    </RadzenFormField>
                </RadzenStack>
            }
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">
                <RadzenStack>
                    <RadzenFormField Text="Liều lượng" Variant="@variant">
                        <RadzenTextBox @bind-Value="all.Content" Disabled />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn SizeLG="4" SizeMD="4" SizeSM="12" Size="12">

                @if(listunit_load != null)
            {
                <RadzenStack>
                    <RadzenFormField Text="Dạng bào chế" Variant="@variant">
                        <RadzenDropDown @bind-Value="@all.Unit" Disabled Data=@listunit_load TextProperty="Unit_name" ValueProperty="Unit_name" Placeholder="Chọn dạng bào chế " AllowVirtualization="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowFiltering="true" />
                    </RadzenFormField>
                </RadzenStack>
            }
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack>
            <RadzenFormField Text="Thời gian bắt đầu dị ứng" Variant="@variant">
                <RadzenTextBox @bind-Value="all.Allergy_date" />
            </RadzenFormField>
        </RadzenStack>

        <RadzenStack>
            <RadzenFormField Text="Mô tả triệu chứng dị ứng" Variant="@variant">
                <RadzenTextBox @bind-Value="all.Symptoms" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Mức độ" Variant="@variant">
                <RadzenTextBox @bind-Value="all.Severity_level" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Biện pháp" Variant="@variant">
                <RadzenTextBox @bind-Value="all.Treatment_measures" />
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack>
            <RadzenFormField Text="Các loại thuốc thay thế" Variant="@variant">
                <RadzenTextBox @bind-Value="all.Alternative_drugs" />
            </RadzenFormField>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Text="Trở lại" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            <RadzenButton Text="Cập nhật" Click="() => UpdateAllergy(id_sub,all)" Style="width: 120px;" />
        </RadzenStack>

    </RadzenStack>
    ;
                        });
    }

    private async Task UpdateAllergy(long id, AllergyModel allergy)
    {
        var result = await CatalogService.PutAllergy(id, allergy);
        if (result != null && result.Code == 200)
        {
            notification.Notify(NotificationSeverity.Success, result.Message);
            DialogService.Close();
            await Reload();
        }
        else
        {
            notification.Notify(NotificationSeverity.Warning, result?.Message);
        }
    }


    private async void ConfirmDelete(string type, int id)
    {
        bool? result = await DialogService.Confirm("Bạn có chắc chắn muốn xoá?", "Xoá dữ liệu", new ConfirmOptions() { OkButtonText = "Có", CancelButtonText = "Không" });
        if (result == true)
        {
            DeleteCatalogData(type, id);
        }
    }
}


